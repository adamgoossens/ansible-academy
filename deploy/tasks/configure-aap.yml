- name: create Academy organisation
  awx.awx.organization:
    name: "Academy"
    description: "Ansible academy organisation"
    state: present

- name: Check if academy-admin.password exists
  stat:
    path: "./academy-admin.password"
  register: academy_admin_pass_file

- when:
    - not academy_admin_pass_file.stat.exists
  name: Create password for academy-admin user
  copy:
    content: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=10') }}"
    dest: './academy-admin.password'

- name: Create Organisation Admin account academy-admin
  awx.awx.user:
    username: 'academy-admin'
    password: "{{ lookup('file', './academy-admin.password') }}"
    state: present
    update_secrets: false

- name: Grant academy-admin admin role over the organisation
  awx.awx.role:
    user: academy-admin
    organizations:
      - 'Academy'
    role: admin

- name: create projects for expected number of users
  awx.awx.project:
    name: "{{ username }}-project"
    description: "{{ username }}'s project"
    organization: "Academy"
    state: present
    scm_update_on_launch: false
    scm_type: git
    scm_url: "{{ github_repo_url }}"
    wait: false
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: create Academy Participants team
  awx.awx.team:
    name: Academy Participants
    description: Attendees
    organization: Academy
    state: present

- name: Create user logins
  awx.awx.user:
    username: "{{ username }}"
    password: 1800redhat
    state: present
    update_secrets: false
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Add created users to Academy Participants team
  awx.awx.role:
    user: "{{username}}"
    target_teams:
      - 'Academy Participants'
    role: member
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: create AWS inventory credential
  awx.awx.credential:
    name: "Dynamic Inventory"
    description: "Dynamic inventory"
    organization: Academy
    credential_type: "Amazon Web Services"
    update_secrets: false
    inputs:
      username: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      password: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    state: present

- name: create AWS job credential
  awx.awx.credential:
    name: "Infrastructure Credential"
    description: "Infrastructure Credential"
    organization: Academy
    credential_type: "Amazon Web Services"
    update_secrets: false
    inputs:
      username: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      password: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    state: present

- name: Create AWS Keypair credential
  awx.awx.credential:
    name: "Virtual Machine Key"
    description: "VM SSH Key"
    organization: Academy
    credential_type: Machine
    update_secrets: false
    inputs:
      ssh_key_data: "{{ lookup('file', './academy.key') }}"

- name: Grant academy participants team use permissions on credentials
  awx.awx.role:
    team: 'Academy Participants'
    role: use
    credentials:
      - 'Dynamic Inventory'
      - 'Virtual Machine Key'
      - 'Infrastructure Credential'
    state: present

- name: Grant users access to their own projects
  awx.awx.role:
    user: "{{username}}"
    projects:
      - "{{username}}-project"
    role: "use"
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Create one workflow template for each user
  awx.awx.workflow_job_template:
    name: "{{username}}-workflow"
    description: "{{username}}'s Workflow Template"
    organization: 'Academy'
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Grant users access to their workflow templates
  awx.awx.role:
    user: "{{ username }}"
    workflows:
      - "{{ username }}-workflow"
    role: "admin"
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Create inventory for each user
  awx.awx.inventory:
    name: "{{username}}"
    description: "{{username}} inventory"
    organization: "Academy"
    state: present
    variables:
      academy_user: "{{username}}"
      aws:
        vpc: "{{ vpc_id }}"
        subnet: "{{ subnet_id }}"
        securitygroup: "{{ securitygroup_id }}"
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Add localhost to each user inventory
  awx.awx.host:
    name: "localhost"
    description: "Local Host"
    inventory: "{{username}}"
    state: present
    variables:
      ansible_connection: local
  loop: "{{ range(1, number_of_attendees|int + 1) | list }}"
  vars:
    username: "user{{item}}"

- name: Grant users access to their inventory
  awx.awx.role:
    user: "{{ username }}"
    inventories:
      - "{{ username }}"
    role: "{{ role }}"
  loop: "{{ range(1, number_of_attendees + 1) | product(['use', 'update']) | list }}"
  vars:
    username: "user{{ item[0] }}"
    role: "{{ item[1] }}"

- name: Add EC2 inventory source
  awx.awx.inventory_source:
    name: "Dynamic Inventory"
    description: "Dynamic inventory source"
    inventory: "{{username}}"
    credential: "Dynamic Inventory"
    overwrite: True
    update_on_launch: True
    source: ec2
    source_vars:
      filters:
        tag:User: "{{username}}"
  loop: "{{ range(1, number_of_attendees + 1) | list }}"
  vars:
    username: "user{{item}}"
